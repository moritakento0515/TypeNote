version: '3.10'
services:
  web:
    build: .
    container_name: django_web
    restart: always
    volumes:
      - static_volume:/app/staticfiles
    expose: 
      # Gunicornが待機しているポートをリッスンできるようにする
      - "8000"
    env_file:
      - .env

  nginx:
    image: nginx:latest
    container_name: django_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # nginx.confの読み取り
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      # 静的ファイルの読み取り
      - static_volume:/app/staticfiles
      - ./media:/app/media
      # certbot周りの読み取り
      - certs:/etc/letsencrypt       
      - certbot_challenge:/var/www/certbot
    env_file:
      - .env
    entrypoint: >
      sh -c "envsubst '\$SERVER_NAME' \
             < /etc/nginx/nginx.conf.template \
             > /etc/nginx/nginx.conf \
             && exec nginx -g 'daemon off;'"
    depends_on:
      - web

  certbot:
    image: certbot/certbot
    container_name: certbot
    env_file:
      - .env
    volumes:
      # 証明書の共有
      - certs:/etc/letsencrypt   
      # 認証ファイルの共有        
      - certbot_challenge:/var/www/certbot
    
    entrypoint: >         #コンテナ起動時に実行されるコマンドを定義
      sh -c "certbot certonly --webroot \
             -w /var/www/certbot \
             --non-interactive --agree-tos \
             -m ${CERTBOT_EMAIL} \
             -d ${CERTBOT_DOMAIN} \
             && cp -Lrf /etc/letsencrypt/live /etc/letsencrypt.backup"
    # ↑ 本番環境で変更　ドメイン名 (-d) とメールアドレス (-m) 
    # SSL証明書を初回取得するためのコマンド
    # webroot方式で証明書を取得し、認証ファイルを/var/www/certbotに取得
    # 証明書をバックアップ

volumes:
  static_volume:
  certs:                      # 証明書用ボリューム
  certbot_challenge:          # webroot 認証用の共有ボリューム